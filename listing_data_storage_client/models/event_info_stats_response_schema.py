# coding: utf-8

"""
    Listing Data Storage

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class EventInfoStatsResponseSchema(BaseModel):
    """
    EventInfoStatsResponseSchema
    """ # noqa: E501
    venue_size: Optional[Annotated[int, Field(strict=True, ge=0)]]
    primary_available: Optional[Annotated[int, Field(strict=True, ge=0)]]
    primary_available_percent: Optional[Union[Annotated[float, Field(le=100.0, strict=True, ge=0.0)], Annotated[int, Field(le=100, strict=True, ge=0)]]]
    resale_available: Optional[Annotated[int, Field(strict=True, ge=0)]]
    current_average_price: Optional[StrictStr]
    total_available: Optional[Annotated[int, Field(strict=True, ge=0)]]
    high_price: Optional[StrictStr]
    low_price: Optional[StrictStr]
    resale_arbitrage_percent: Optional[Union[Annotated[float, Field(le=100.0, strict=True, ge=0.0)], Annotated[int, Field(le=100, strict=True, ge=0)]]]
    velocity: Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]]
    __properties: ClassVar[List[str]] = ["venue_size", "primary_available", "primary_available_percent", "resale_available", "current_average_price", "total_available", "high_price", "low_price", "resale_arbitrage_percent", "velocity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventInfoStatsResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if venue_size (nullable) is None
        # and model_fields_set contains the field
        if self.venue_size is None and "venue_size" in self.model_fields_set:
            _dict['venue_size'] = None

        # set to None if primary_available (nullable) is None
        # and model_fields_set contains the field
        if self.primary_available is None and "primary_available" in self.model_fields_set:
            _dict['primary_available'] = None

        # set to None if primary_available_percent (nullable) is None
        # and model_fields_set contains the field
        if self.primary_available_percent is None and "primary_available_percent" in self.model_fields_set:
            _dict['primary_available_percent'] = None

        # set to None if resale_available (nullable) is None
        # and model_fields_set contains the field
        if self.resale_available is None and "resale_available" in self.model_fields_set:
            _dict['resale_available'] = None

        # set to None if current_average_price (nullable) is None
        # and model_fields_set contains the field
        if self.current_average_price is None and "current_average_price" in self.model_fields_set:
            _dict['current_average_price'] = None

        # set to None if total_available (nullable) is None
        # and model_fields_set contains the field
        if self.total_available is None and "total_available" in self.model_fields_set:
            _dict['total_available'] = None

        # set to None if high_price (nullable) is None
        # and model_fields_set contains the field
        if self.high_price is None and "high_price" in self.model_fields_set:
            _dict['high_price'] = None

        # set to None if low_price (nullable) is None
        # and model_fields_set contains the field
        if self.low_price is None and "low_price" in self.model_fields_set:
            _dict['low_price'] = None

        # set to None if resale_arbitrage_percent (nullable) is None
        # and model_fields_set contains the field
        if self.resale_arbitrage_percent is None and "resale_arbitrage_percent" in self.model_fields_set:
            _dict['resale_arbitrage_percent'] = None

        # set to None if velocity (nullable) is None
        # and model_fields_set contains the field
        if self.velocity is None and "velocity" in self.model_fields_set:
            _dict['velocity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventInfoStatsResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "venue_size": obj.get("venue_size"),
            "primary_available": obj.get("primary_available"),
            "primary_available_percent": obj.get("primary_available_percent"),
            "resale_available": obj.get("resale_available"),
            "current_average_price": obj.get("current_average_price"),
            "total_available": obj.get("total_available"),
            "high_price": obj.get("high_price"),
            "low_price": obj.get("low_price"),
            "resale_arbitrage_percent": obj.get("resale_arbitrage_percent"),
            "velocity": obj.get("velocity")
        })
        return _obj


