# coding: utf-8

"""
    Listing Data Storage

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from listing_data_storage_client.models.facility_fee_max import FacilityFeeMax
from listing_data_storage_client.models.facility_fee_min import FacilityFeeMin
from listing_data_storage_client.models.facility_tiered_fee_max import FacilityTieredFeeMax
from listing_data_storage_client.models.facility_tiered_fee_min import FacilityTieredFeeMin
from listing_data_storage_client.models.per_ticket_fee_max import PerTicketFeeMax
from listing_data_storage_client.models.per_ticket_fee_max_tiered import PerTicketFeeMaxTiered
from listing_data_storage_client.models.per_ticket_fee_min import PerTicketFeeMin
from listing_data_storage_client.models.per_ticket_fee_min_tiered import PerTicketFeeMinTiered
from listing_data_storage_client.models.price_max import PriceMax
from listing_data_storage_client.models.price_min import PriceMin
from listing_data_storage_client.models.total_price import TotalPrice
from typing import Optional, Set
from typing_extensions import Self

class EvenuePriceLevel(BaseModel):
    """
    EvenuePriceLevel
    """ # noqa: E501
    price_level_id: StrictStr
    price_level_secname: StrictStr
    price_min: PriceMin
    price_max: PriceMax
    facility_fee_max: Optional[FacilityFeeMax]
    facility_fee_min: Optional[FacilityFeeMin]
    facility_tiered_fee_min: Optional[FacilityTieredFeeMin]
    facility_tiered_fee_max: Optional[FacilityTieredFeeMax]
    per_ticket_fee_min: Optional[PerTicketFeeMin]
    per_ticket_fee_max: Optional[PerTicketFeeMax]
    per_ticket_fee_min_tiered: Optional[PerTicketFeeMinTiered]
    per_ticket_fee_max_tiered: Optional[PerTicketFeeMaxTiered]
    total_price: TotalPrice
    __properties: ClassVar[List[str]] = ["price_level_id", "price_level_secname", "price_min", "price_max", "facility_fee_max", "facility_fee_min", "facility_tiered_fee_min", "facility_tiered_fee_max", "per_ticket_fee_min", "per_ticket_fee_max", "per_ticket_fee_min_tiered", "per_ticket_fee_max_tiered", "total_price"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EvenuePriceLevel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of price_min
        if self.price_min:
            _dict['price_min'] = self.price_min.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_max
        if self.price_max:
            _dict['price_max'] = self.price_max.to_dict()
        # override the default output from pydantic by calling `to_dict()` of facility_fee_max
        if self.facility_fee_max:
            _dict['facility_fee_max'] = self.facility_fee_max.to_dict()
        # override the default output from pydantic by calling `to_dict()` of facility_fee_min
        if self.facility_fee_min:
            _dict['facility_fee_min'] = self.facility_fee_min.to_dict()
        # override the default output from pydantic by calling `to_dict()` of facility_tiered_fee_min
        if self.facility_tiered_fee_min:
            _dict['facility_tiered_fee_min'] = self.facility_tiered_fee_min.to_dict()
        # override the default output from pydantic by calling `to_dict()` of facility_tiered_fee_max
        if self.facility_tiered_fee_max:
            _dict['facility_tiered_fee_max'] = self.facility_tiered_fee_max.to_dict()
        # override the default output from pydantic by calling `to_dict()` of per_ticket_fee_min
        if self.per_ticket_fee_min:
            _dict['per_ticket_fee_min'] = self.per_ticket_fee_min.to_dict()
        # override the default output from pydantic by calling `to_dict()` of per_ticket_fee_max
        if self.per_ticket_fee_max:
            _dict['per_ticket_fee_max'] = self.per_ticket_fee_max.to_dict()
        # override the default output from pydantic by calling `to_dict()` of per_ticket_fee_min_tiered
        if self.per_ticket_fee_min_tiered:
            _dict['per_ticket_fee_min_tiered'] = self.per_ticket_fee_min_tiered.to_dict()
        # override the default output from pydantic by calling `to_dict()` of per_ticket_fee_max_tiered
        if self.per_ticket_fee_max_tiered:
            _dict['per_ticket_fee_max_tiered'] = self.per_ticket_fee_max_tiered.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_price
        if self.total_price:
            _dict['total_price'] = self.total_price.to_dict()
        # set to None if facility_fee_max (nullable) is None
        # and model_fields_set contains the field
        if self.facility_fee_max is None and "facility_fee_max" in self.model_fields_set:
            _dict['facility_fee_max'] = None

        # set to None if facility_fee_min (nullable) is None
        # and model_fields_set contains the field
        if self.facility_fee_min is None and "facility_fee_min" in self.model_fields_set:
            _dict['facility_fee_min'] = None

        # set to None if facility_tiered_fee_min (nullable) is None
        # and model_fields_set contains the field
        if self.facility_tiered_fee_min is None and "facility_tiered_fee_min" in self.model_fields_set:
            _dict['facility_tiered_fee_min'] = None

        # set to None if facility_tiered_fee_max (nullable) is None
        # and model_fields_set contains the field
        if self.facility_tiered_fee_max is None and "facility_tiered_fee_max" in self.model_fields_set:
            _dict['facility_tiered_fee_max'] = None

        # set to None if per_ticket_fee_min (nullable) is None
        # and model_fields_set contains the field
        if self.per_ticket_fee_min is None and "per_ticket_fee_min" in self.model_fields_set:
            _dict['per_ticket_fee_min'] = None

        # set to None if per_ticket_fee_max (nullable) is None
        # and model_fields_set contains the field
        if self.per_ticket_fee_max is None and "per_ticket_fee_max" in self.model_fields_set:
            _dict['per_ticket_fee_max'] = None

        # set to None if per_ticket_fee_min_tiered (nullable) is None
        # and model_fields_set contains the field
        if self.per_ticket_fee_min_tiered is None and "per_ticket_fee_min_tiered" in self.model_fields_set:
            _dict['per_ticket_fee_min_tiered'] = None

        # set to None if per_ticket_fee_max_tiered (nullable) is None
        # and model_fields_set contains the field
        if self.per_ticket_fee_max_tiered is None and "per_ticket_fee_max_tiered" in self.model_fields_set:
            _dict['per_ticket_fee_max_tiered'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EvenuePriceLevel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "price_level_id": obj.get("price_level_id"),
            "price_level_secname": obj.get("price_level_secname"),
            "price_min": PriceMin.from_dict(obj["price_min"]) if obj.get("price_min") is not None else None,
            "price_max": PriceMax.from_dict(obj["price_max"]) if obj.get("price_max") is not None else None,
            "facility_fee_max": FacilityFeeMax.from_dict(obj["facility_fee_max"]) if obj.get("facility_fee_max") is not None else None,
            "facility_fee_min": FacilityFeeMin.from_dict(obj["facility_fee_min"]) if obj.get("facility_fee_min") is not None else None,
            "facility_tiered_fee_min": FacilityTieredFeeMin.from_dict(obj["facility_tiered_fee_min"]) if obj.get("facility_tiered_fee_min") is not None else None,
            "facility_tiered_fee_max": FacilityTieredFeeMax.from_dict(obj["facility_tiered_fee_max"]) if obj.get("facility_tiered_fee_max") is not None else None,
            "per_ticket_fee_min": PerTicketFeeMin.from_dict(obj["per_ticket_fee_min"]) if obj.get("per_ticket_fee_min") is not None else None,
            "per_ticket_fee_max": PerTicketFeeMax.from_dict(obj["per_ticket_fee_max"]) if obj.get("per_ticket_fee_max") is not None else None,
            "per_ticket_fee_min_tiered": PerTicketFeeMinTiered.from_dict(obj["per_ticket_fee_min_tiered"]) if obj.get("per_ticket_fee_min_tiered") is not None else None,
            "per_ticket_fee_max_tiered": PerTicketFeeMaxTiered.from_dict(obj["per_ticket_fee_max_tiered"]) if obj.get("per_ticket_fee_max_tiered") is not None else None,
            "total_price": TotalPrice.from_dict(obj["total_price"]) if obj.get("total_price") is not None else None
        })
        return _obj


