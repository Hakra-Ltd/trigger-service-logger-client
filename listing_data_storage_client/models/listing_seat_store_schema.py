# coding: utf-8

"""
    Listing Data Storage

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from listing_data_storage_client.models.listprice import Listprice
from listing_data_storage_client.models.totalprice import Totalprice
from typing import Optional, Set
from typing_extensions import Self

class ListingSeatStoreSchema(BaseModel):
    """
    The individual seat and or section if it is GA model.
    """ # noqa: E501
    place_id: StrictStr = Field(alias="placeId")
    section: StrictStr
    row: StrictStr
    seat_number: Optional[StrictStr] = Field(alias="seatNumber")
    row_rank: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(alias="rowRank")
    count: Annotated[int, Field(strict=True, ge=0)]
    list_price: Optional[Listprice] = Field(default=None, alias="listPrice")
    total_price: Optional[Totalprice] = Field(default=None, alias="totalPrice")
    attributes: Optional[List[StrictStr]] = None
    offer_name: Optional[StrictStr] = Field(alias="offerName")
    description: Optional[List[StrictStr]] = None
    inventory_type: Optional[StrictStr] = Field(alias="inventoryType")
    offer_type: Optional[StrictStr] = Field(alias="offerType")
    __properties: ClassVar[List[str]] = ["placeId", "section", "row", "seatNumber", "rowRank", "count", "listPrice", "totalPrice", "attributes", "offerName", "description", "inventoryType", "offerType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListingSeatStoreSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of list_price
        if self.list_price:
            _dict['listPrice'] = self.list_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_price
        if self.total_price:
            _dict['totalPrice'] = self.total_price.to_dict()
        # set to None if seat_number (nullable) is None
        # and model_fields_set contains the field
        if self.seat_number is None and "seat_number" in self.model_fields_set:
            _dict['seatNumber'] = None

        # set to None if row_rank (nullable) is None
        # and model_fields_set contains the field
        if self.row_rank is None and "row_rank" in self.model_fields_set:
            _dict['rowRank'] = None

        # set to None if list_price (nullable) is None
        # and model_fields_set contains the field
        if self.list_price is None and "list_price" in self.model_fields_set:
            _dict['listPrice'] = None

        # set to None if total_price (nullable) is None
        # and model_fields_set contains the field
        if self.total_price is None and "total_price" in self.model_fields_set:
            _dict['totalPrice'] = None

        # set to None if offer_name (nullable) is None
        # and model_fields_set contains the field
        if self.offer_name is None and "offer_name" in self.model_fields_set:
            _dict['offerName'] = None

        # set to None if inventory_type (nullable) is None
        # and model_fields_set contains the field
        if self.inventory_type is None and "inventory_type" in self.model_fields_set:
            _dict['inventoryType'] = None

        # set to None if offer_type (nullable) is None
        # and model_fields_set contains the field
        if self.offer_type is None and "offer_type" in self.model_fields_set:
            _dict['offerType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListingSeatStoreSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "placeId": obj.get("placeId"),
            "section": obj.get("section"),
            "row": obj.get("row"),
            "seatNumber": obj.get("seatNumber"),
            "rowRank": obj.get("rowRank"),
            "count": obj.get("count"),
            "listPrice": Listprice.from_dict(obj["listPrice"]) if obj.get("listPrice") is not None else None,
            "totalPrice": Totalprice.from_dict(obj["totalPrice"]) if obj.get("totalPrice") is not None else None,
            "attributes": obj.get("attributes"),
            "offerName": obj.get("offerName"),
            "description": obj.get("description"),
            "inventoryType": obj.get("inventoryType"),
            "offerType": obj.get("offerType")
        })
        return _obj


