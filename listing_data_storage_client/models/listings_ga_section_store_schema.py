# coding: utf-8

"""
    Listing Data Storage

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from listing_data_storage_client.models.listing_ga_section_place_count import ListingGaSectionPlaceCount
from typing import Optional, Set
from typing_extensions import Self

class ListingsGaSectionStoreSchema(BaseModel):
    """
    ListingsGaSectionStoreSchema
    """ # noqa: E501
    section: StrictStr
    current_count: Annotated[int, Field(strict=True, ge=0)] = Field(alias="currentCount")
    total_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="totalCount")
    place_count: List[ListingGaSectionPlaceCount]
    __properties: ClassVar[List[str]] = ["section", "currentCount", "totalCount", "place_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListingsGaSectionStoreSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in place_count (list)
        _items = []
        if self.place_count:
            for _item_place_count in self.place_count:
                if _item_place_count:
                    _items.append(_item_place_count.to_dict())
            _dict['place_count'] = _items
        # set to None if total_count (nullable) is None
        # and model_fields_set contains the field
        if self.total_count is None and "total_count" in self.model_fields_set:
            _dict['totalCount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListingsGaSectionStoreSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "section": obj.get("section"),
            "currentCount": obj.get("currentCount"),
            "totalCount": obj.get("totalCount"),
            "place_count": [ListingGaSectionPlaceCount.from_dict(_item) for _item in obj["place_count"]] if obj.get("place_count") is not None else None
        })
        return _obj


