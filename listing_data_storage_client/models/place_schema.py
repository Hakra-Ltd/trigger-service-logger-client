# coding: utf-8

"""
    Listing Data Storage

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PlaceSchema(BaseModel):
    """
    PlaceSchema
    """ # noqa: E501
    place_id: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, alias="placeId")
    section_full: StrictStr = Field(alias="sectionFull")
    section: StrictStr
    row: StrictStr
    row_rank: Optional[StrictInt] = Field(default=None, alias="rowRank")
    count: Optional[StrictInt]
    seat_number: Optional[StrictStr] = Field(default=None, alias="seatNumber")
    __properties: ClassVar[List[str]] = ["placeId", "sectionFull", "section", "row", "rowRank", "count", "seatNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlaceSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if place_id (nullable) is None
        # and model_fields_set contains the field
        if self.place_id is None and "place_id" in self.model_fields_set:
            _dict['placeId'] = None

        # set to None if row_rank (nullable) is None
        # and model_fields_set contains the field
        if self.row_rank is None and "row_rank" in self.model_fields_set:
            _dict['rowRank'] = None

        # set to None if count (nullable) is None
        # and model_fields_set contains the field
        if self.count is None and "count" in self.model_fields_set:
            _dict['count'] = None

        # set to None if seat_number (nullable) is None
        # and model_fields_set contains the field
        if self.seat_number is None and "seat_number" in self.model_fields_set:
            _dict['seatNumber'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlaceSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "placeId": obj.get("placeId"),
            "sectionFull": obj.get("sectionFull"),
            "section": obj.get("section"),
            "row": obj.get("row"),
            "rowRank": obj.get("rowRank"),
            "count": obj.get("count"),
            "seatNumber": obj.get("seatNumber")
        })
        return _obj


