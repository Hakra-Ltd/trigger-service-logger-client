# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from trigger_service_logger_client.models.scrap_type import ScrapType
from typing import Optional, Set
from typing_extensions import Self

class CreateJobRequestSchema(BaseModel):
    """
    CreateJobRequestSchema
    """ # noqa: E501
    event_id: StrictStr
    job_type: Optional[ScrapType] = None
    run_config: Optional[Dict[str, Any]] = None
    urgent: Optional[StrictBool] = None
    no_planning: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["event_id", "job_type", "run_config", "urgent", "no_planning"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateJobRequestSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if run_config (nullable) is None
        # and model_fields_set contains the field
        if self.run_config is None and "run_config" in self.model_fields_set:
            _dict['run_config'] = None

        # set to None if urgent (nullable) is None
        # and model_fields_set contains the field
        if self.urgent is None and "urgent" in self.model_fields_set:
            _dict['urgent'] = None

        # set to None if no_planning (nullable) is None
        # and model_fields_set contains the field
        if self.no_planning is None and "no_planning" in self.model_fields_set:
            _dict['no_planning'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateJobRequestSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "event_id": obj.get("event_id"),
            "job_type": obj.get("job_type"),
            "run_config": obj.get("run_config"),
            "urgent": obj.get("urgent"),
            "no_planning": obj.get("no_planning")
        })
        return _obj


