# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class JobPlanLogResponseSchema(BaseModel):
    """
    JobPlanLogResponseSchema
    """ # noqa: E501
    run_id: StrictStr
    job_id: StrictInt
    initiated: datetime
    finished: Optional[datetime] = None
    success: Optional[StrictBool] = None
    error_reason: Optional[StrictStr] = None
    urgent: Optional[StrictBool] = None
    process_notes: Optional[Dict[str, Any]] = None
    started_scraping: Optional[datetime] = None
    finished_scraping: Optional[datetime] = None
    success_scraping: Optional[StrictBool] = None
    scrap_notes: Optional[Dict[str, Any]] = None
    scrap_retry: Optional[StrictInt] = None
    started_data_process: Optional[datetime] = None
    finished_data_process: Optional[datetime] = None
    success_data_process: Optional[StrictBool] = None
    data_process_notes: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["run_id", "job_id", "initiated", "finished", "success", "error_reason", "urgent", "process_notes", "started_scraping", "finished_scraping", "success_scraping", "scrap_notes", "scrap_retry", "started_data_process", "finished_data_process", "success_data_process", "data_process_notes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobPlanLogResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if finished (nullable) is None
        # and model_fields_set contains the field
        if self.finished is None and "finished" in self.model_fields_set:
            _dict['finished'] = None

        # set to None if success (nullable) is None
        # and model_fields_set contains the field
        if self.success is None and "success" in self.model_fields_set:
            _dict['success'] = None

        # set to None if error_reason (nullable) is None
        # and model_fields_set contains the field
        if self.error_reason is None and "error_reason" in self.model_fields_set:
            _dict['error_reason'] = None

        # set to None if urgent (nullable) is None
        # and model_fields_set contains the field
        if self.urgent is None and "urgent" in self.model_fields_set:
            _dict['urgent'] = None

        # set to None if process_notes (nullable) is None
        # and model_fields_set contains the field
        if self.process_notes is None and "process_notes" in self.model_fields_set:
            _dict['process_notes'] = None

        # set to None if started_scraping (nullable) is None
        # and model_fields_set contains the field
        if self.started_scraping is None and "started_scraping" in self.model_fields_set:
            _dict['started_scraping'] = None

        # set to None if finished_scraping (nullable) is None
        # and model_fields_set contains the field
        if self.finished_scraping is None and "finished_scraping" in self.model_fields_set:
            _dict['finished_scraping'] = None

        # set to None if success_scraping (nullable) is None
        # and model_fields_set contains the field
        if self.success_scraping is None and "success_scraping" in self.model_fields_set:
            _dict['success_scraping'] = None

        # set to None if scrap_notes (nullable) is None
        # and model_fields_set contains the field
        if self.scrap_notes is None and "scrap_notes" in self.model_fields_set:
            _dict['scrap_notes'] = None

        # set to None if scrap_retry (nullable) is None
        # and model_fields_set contains the field
        if self.scrap_retry is None and "scrap_retry" in self.model_fields_set:
            _dict['scrap_retry'] = None

        # set to None if started_data_process (nullable) is None
        # and model_fields_set contains the field
        if self.started_data_process is None and "started_data_process" in self.model_fields_set:
            _dict['started_data_process'] = None

        # set to None if finished_data_process (nullable) is None
        # and model_fields_set contains the field
        if self.finished_data_process is None and "finished_data_process" in self.model_fields_set:
            _dict['finished_data_process'] = None

        # set to None if success_data_process (nullable) is None
        # and model_fields_set contains the field
        if self.success_data_process is None and "success_data_process" in self.model_fields_set:
            _dict['success_data_process'] = None

        # set to None if data_process_notes (nullable) is None
        # and model_fields_set contains the field
        if self.data_process_notes is None and "data_process_notes" in self.model_fields_set:
            _dict['data_process_notes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobPlanLogResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "run_id": obj.get("run_id"),
            "job_id": obj.get("job_id"),
            "initiated": obj.get("initiated"),
            "finished": obj.get("finished"),
            "success": obj.get("success"),
            "error_reason": obj.get("error_reason"),
            "urgent": obj.get("urgent"),
            "process_notes": obj.get("process_notes"),
            "started_scraping": obj.get("started_scraping"),
            "finished_scraping": obj.get("finished_scraping"),
            "success_scraping": obj.get("success_scraping"),
            "scrap_notes": obj.get("scrap_notes"),
            "scrap_retry": obj.get("scrap_retry"),
            "started_data_process": obj.get("started_data_process"),
            "finished_data_process": obj.get("finished_data_process"),
            "success_data_process": obj.get("success_data_process"),
            "data_process_notes": obj.get("data_process_notes")
        })
        return _obj


